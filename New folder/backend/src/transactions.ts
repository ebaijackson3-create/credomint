import express from 'express'; import { prisma } from './db'; import { genId } from './utils'; const router = express.Router();
router.post('/transfer', async (req, res)=>{ try{ const { fromWalletId,toWalletId,amountCents,userId } = req.body; if(!fromWalletId||!toWalletId||!amountCents) return res.status(400).json({error:'missing'}); const fw = await prisma.wallet.findUnique({where:{id:fromWalletId}}); const tw = await prisma.wallet.findUnique({where:{id:toWalletId}}); if(!fw||!tw) return res.status(400).json({error:'wallet not found'}); if(BigInt(fw.availableBalanceBigint) < BigInt(amountCents)) return res.status(400).json({error:'insufficient'}); const tx = await prisma.$transaction(async (tx)=>{ const t = await tx.transaction.create({data:{userId,walletId:fromWalletId,amountBigint:BigInt(amountCents),currency:fw.currency,status:'pending'}}); const fromAfter = BigInt(fw.ledgerBalanceBigint)-BigInt(amountCents); await tx.ledgerEntry.create({data:{entryRef:genId(),walletId:fromWalletId,amountBigint:-BigInt(amountCents),balanceAfter:fromAfter,entryType:'debit',source:'transfer',metadata:{tx:t.id}}}); await tx.wallet.update({where:{id:fromWalletId}, data:{ledgerBalanceBigint:fromAfter,availableBalanceBigint:fromAfter}}); const toAfter = BigInt(tw.ledgerBalanceBigint)+BigInt(amountCents); await tx.ledgerEntry.create({data:{entryRef:genId(),walletId:toWalletId,amountBigint:BigInt(amountCents),balanceAfter:toAfter,entryType:'credit',source:'transfer',metadata:{tx:t.id}}}); await tx.wallet.update({where:{id:toWalletId}, data:{ledgerBalanceBigint:toAfter,availableBalanceBigint:toAfter}}); const done = await tx.transaction.update({where:{id:t.id}, data:{status:'succeeded',completedAt:new Date()}}); return done; }); return res.json({ok:true,tx}); }catch(e){ return res.status(500).json({error:String(e)}); } });
export default router;
